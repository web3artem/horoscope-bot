import asyncio
import sys
from datetime import datetime

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery
from aiogram.utils.exceptions import BotBlocked, MessageToDeleteNotFound
from asyncpg import UniqueViolationError
from loguru import logger

from db.db_gino import db
from db.quick_commands import delete_mess, save_message_id
from db.schemas.user import User, MessageId, Distribution
from keyboards.client_kb import *
from loader import bot
from states.states import FSMClientRegistration
from utils import funcs

logger.add(sys.stderr, format="<white>{time:HH:mm:ss}</white>"
                              " | <green>{level: <8}</green>"
                              " | <cyan>{line}</cyan>"
                              " - <white>{message}</white>")
logger.add('logs/file_{time}.log')


async def start_command(message: types.Message):
    if await funcs.user_exists(User, message.from_user.id):
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ '
                             '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.')
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} - {message.from_user.username} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω..')
    else:
        await message.delete()
        await FSMClientRegistration.client_name.set()
        mess = await funcs.get_background_photo(message, 'media/backgrounds/background-name.jpg')
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} - {message.from_user.username} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

        await MessageId(user_id=message.from_user.id, message_id=mess.message_id).create()


# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def schedule(time_dilation: int):
    now = datetime.now()
    await asyncio.sleep(time_dilation)

    counter = 0

    while True:
        dist = await Distribution.select('id', 'was_sent').gino.all()

        for user_id, flag in dist:
            if counter == len(dist):
                counter = 0
                await asyncio.sleep(3600)

            if now.hour == 1 and await User.select('receive_day_period').where(
                    User.user_id == user_id).gino.scalar() == 'morning':
                await Distribution.update.values(was_sent=False).where(Distribution.id == user_id).gino.status()

            if now.hour == 19 and await User.select('receive_day_period').where(
                    User.user_id == user_id).gino.scalar() == 'tomorrow':
                await Distribution.update.values(was_sent=False).where(Distribution.id == user_id).gino.status()

            if not await Distribution.select('was_sent').where(Distribution.id == user_id).gino.scalar():
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ—á–µ–Ω
                try:
                    await funcs.prepare_data(user_id)
                    counter += 1
                except BotBlocked:
                    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç.')
                    await Distribution.delete.where(Distribution.id == user_id).gino.status()
                    await User.delete.where(User.user_id == user_id).gino.status()


async def send(message: types.Message | CallbackQuery):
    user_id = message.from_user.id
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - {message.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –≥–æ—Ä–æ—Å–∫–æ–ø —Å –ø–æ–º–æ—â—å—é /send.')

    if await funcs.user_exists(User, user_id):
        try:
            await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø ‚ù§Ô∏è ‚ù§Ô∏è ‚ù§Ô∏è')
            await funcs.prepare_data(user_id)

            if await Distribution.query.where(Distribution.id == user_id).gino.scalar() is None:
                await Distribution(id=user_id, was_sent=True).create()

        except Exception as ex:
            logger.error(ex)
    else:
        await message.answer('–í—ã –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ /start')


async def change(message: types.Message | CallbackQuery):
    await FSMClientRegistration.client_change_info.set()
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    if type(message) == types.Message:
        await bot.send_message(message.chat.id,
                               text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å ü•∫',
                               reply_markup=change_inline_kb)
    else:
        await bot.send_message(message.message.chat.id,
                               text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å ü•∫',
                               reply_markup=change_inline_kb)


async def get_my_info(message: types.Message | CallbackQuery):
    data = User.select('name', 'gender', 'birth_date', 'birth_place', 'birth_time', 'receive_day_period').where(
        User.user_id == message.from_user.id)
    data = await db.all(data)

    if data[0][5] == 'tomorrow':
        time_preference = '–£—Ç—Ä–æ–º'
    else:
        time_preference = '–í–µ—á–µ—Ä–æ–º'

    await message.answer(text=f'–ò–º—è: {data[0][0]}\n\n'
                              f'–ü–æ–ª: {data[0][1]}\n\n'
                              f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[0][2]}\n\n'
                              f'–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[0][3]}\n\n'
                              f'–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {data[0][4] if not None else "–ù–µ –∑–Ω–∞–µ—Ç–µ"}\n\n'
                              f'–ü–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: {time_preference}\n\n'
                              f'–ï—Å–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, —Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /change')


async def name_info(message: types.Message, state: FSMContext):
    await message.delete()

    if not funcs.validate_str_len(message.text, 32):
        try:
            await bot.delete_message(message.chat.id, delete_mess(message.from_user.id))
        except MessageToDeleteNotFound:
            pass
        mes = await message.answer(text='–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤\n\n–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è ')
        await save_message_id(message, mes.message_id)
        await FSMClientRegistration.client_name.set()

    else:
        try:
            await bot.delete_message(message.chat.id, await delete_mess(message))
        except MessageToDeleteNotFound:
            pass
        async with state.proxy() as data:
            data['name'] = message.text
            data['user_id'] = message.from_user.id
        await FSMClientRegistration.next()
        mes = await funcs.get_background_photo(message, 'media/backgrounds/background-gender.jpg',
                                               reply_markup=client_gender_inline_kb)
        await save_message_id(message, mes.message_id)


async def gender_info(callback_query: CallbackQuery, state: FSMContext):
    try:
        await bot.delete_message(callback_query.message.chat.id, await delete_mess(callback_query))
    except MessageToDeleteNotFound:
        pass
    gender = callback_query.data
    if gender == 'gender_male':
        gender = '–ú—É–∂—á–∏–Ω–∞'
    else:
        gender = '–ñ–µ–Ω—â–∏–Ω–∞'
    async with state.proxy() as data:
        data['gender'] = gender
    await FSMClientRegistration.next()
    await callback_query.answer()
    mes = await funcs.get_background_photo(callback_query, 'media/backgrounds/birthdate-img.jpg',
                                           caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.1111')
    await save_message_id(callback_query, mes.message_id)


async def check_birthdate(message: types.Message, state: FSMContext):
    await message.delete()
    if funcs.validate_birthdate(message.text):
        await bot.delete_message(message.chat.id, await delete_mess(message))
        async with state.proxy() as data:
            data['birth_date'] = message.text
        await FSMClientRegistration.next()
        mes = await funcs.get_background_photo(message, 'media/backgrounds/birthplace-img.jpg',
                                               caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è')
        await save_message_id(message, mes.message_id)
    else:
        mes = await funcs.get_background_photo(message, 'media/backgrounds/birthdate-img.jpg',
                                               caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.1111')
        try:
            await bot.delete_message(message.chat.id, await delete_mess(message))
        except MessageToDeleteNotFound:
            pass
        await save_message_id(message, mes.message_id)


async def birthplace_info(message: types.Message, state: FSMContext):
    await message.delete()
    try:
        await bot.delete_message(message.chat.id, await delete_mess(message))
    except MessageToDeleteNotFound:
        pass
    async with state.proxy() as data:
        data['birth_place'] = message.text
        await FSMClientRegistration.client_birth_time.set()
        mes = await bot.send_message(message.chat.id, text='–í—ã –∑–Ω–∞–µ—Ç–µ —Å–≤–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è?',
                                     reply_markup=dont_know_inline_kb)
        await save_message_id(message, mes.message_id)


async def birth_time(callback_query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        try:
            await bot.delete_message(callback_query.message.chat.id, await delete_mess(callback_query))
        except MessageToDeleteNotFound:
            pass
        if callback_query.data == 'know_no':
            await FSMClientRegistration.client_send_date.set()
            data['birth_time'] = None
            await callback_query.answer()
            mes = await funcs.get_background_photo(callback_query, 'media/backgrounds/horoscope-time.jpg',
                                                   caption='–£—Ç—Ä–æ–º - –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n–í–µ—á–µ—Ä–æ–º - –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
                                                   reply_markup=client_date_inline_kb)
            await save_message_id(callback_query, mes.message_id)
        else:
            await FSMClientRegistration.client_birth_time_set.set()
            await callback_query.answer()
            mes = await funcs.get_background_photo(callback_query, 'media/backgrounds/birthtime-img.jpg',
                                                   caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ 12:00')
            await save_message_id(callback_query, mes.message_id)


async def set_birth_time(message: types.Message, state: FSMContext):
    await message.delete()
    try:
        await bot.delete_message(message.chat.id, await delete_mess(message))
    except MessageToDeleteNotFound:
        pass
    if funcs.validate_time(message.text):
        birthtime = message.text
    else:
        birthtime = None

    async with state.proxy() as data:
        data['birth_time'] = birthtime
        await FSMClientRegistration.next()
        mes = await funcs.get_background_photo(message, 'media/backgrounds/horoscope-time.jpg',
                                               caption='–£—Ç—Ä–æ–º - –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n–í–µ—á–µ—Ä–æ–º - –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
                                               reply_markup=client_date_inline_kb)
        await save_message_id(message, mes.message_id)


async def prepare_datas(callback_query: CallbackQuery, state: FSMContext):
    try:
        await bot.delete_message(callback_query.message.chat.id, await delete_mess(callback_query))
    except MessageToDeleteNotFound:
        pass
    part_of_the_day = callback_query.data
    if part_of_the_day == 'date_morning':
        part_of_the_day = "–£—Ç—Ä–æ–º"
    else:
        part_of_the_day = "–í–µ—á–µ—Ä–æ–º"
    async with state.proxy() as data:
        data['part_of_the_day'] = part_of_the_day
        await FSMClientRegistration.next()
        mes = await bot.send_message(callback_query.message.chat.id,
                                     text=f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {data["name"]}'
                                          f'\n–ü–æ–ª: {data["gender"]}'
                                          f'\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["birth_date"]}'
                                          f'\n–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {data["birth_place"]}'
                                          f'\n–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {data["birth_time"]}'
                                          f'\n–ü–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: {data["part_of_the_day"]}',
                                     reply_markup=agree_inline_kb)
        await save_message_id(callback_query, mes.message_id)
        await callback_query.answer()


async def agree(callback_query: CallbackQuery, state: FSMContext):
    try:
        await bot.delete_message(callback_query.message.chat.id, await delete_mess(callback_query))
    except MessageToDeleteNotFound:
        pass
    async with state.proxy() as data:
        if data['part_of_the_day'] == '–£—Ç—Ä–æ–º':
            time_preference = 'morning'
        else:
            time_preference = 'tomorrow'
        user = User(user_id=callback_query.from_user.id,
                    username=callback_query.from_user.username,
                    name=data['name'],
                    gender=data['gender'],
                    birth_date=datetime.strptime(data['birth_date'], '%d.%m.%Y').date(),
                    birth_place=data['birth_place'],
                    birth_time=None if data['birth_time'] is None else datetime.strptime(data['birth_time'],
                                                                                         '%H:%M').time(),
                    receive_day_period=time_preference)
        try:
            await user.create()
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} - {callback_query.from_user.username}'
                        f' —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        except UniqueViolationError:
            logger.error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} - {callback_query.from_user.username}'
                         f' —Ä–∞–Ω–µ–µ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')

        if callback_query.data == 'client_agree':
            await send(callback_query)
            await callback_query.answer()

        else:
            await FSMClientRegistration.client_change_info.set()
            mes = await bot.send_message(callback_query.message.chat.id,
                                         text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å ü•∫',
                                         reply_markup=change_inline_kb)
            await save_message_id(callback_query, mes.message_id)
            await callback_query.answer()


async def change_info(callback_query: CallbackQuery, state: FSMContext):
    try:
        await bot.delete_message(callback_query.message.chat.id, await delete_mess(callback_query))
    except MessageToDeleteNotFound:
        pass
    async with state.proxy() as data:
        data_to_change = callback_query.data.split('_')[1]
        if data_to_change != 'receive':
            await FSMClientRegistration.client_what_to_change.set()
            if data_to_change == 'birthtime':
                if funcs.validate_time(data_to_change):
                    birthtime = data_to_change
                else:
                    birthtime = None
            data['data_to_change'] = birthtime
            mes = await bot.send_message(callback_query.message.chat.id,
                                         text='–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üòå')
            await save_message_id(callback_query, mes.message_id)
            await callback_query.answer()
        else:
            await FSMClientRegistration.client_daytime_change.set()
            with open('media/backgrounds/horoscope-time.jpg', 'rb') as photo:
                await bot.send_photo(callback_query.message.chat.id,
                                     reply_markup=client_day_inline_kb, photo=photo)
                await callback_query.answer()


async def what_to_change(message: types.Message, state: FSMContext):
    try:
        await bot.delete_message(message.chat.id, await delete_mess(message))
    except MessageToDeleteNotFound:
        pass
    await message.delete()
    user = User(user_id=message.from_user.id)
    async with state.proxy() as data:
        match data['data_to_change']:
            case 'name':
                await user.update(name=message.text).apply()
            case 'gender':
                await user.update(gender=message.text).apply()
            case 'date':
                await user.update(birth_date=datetime.strptime(message.text, '%d.%m.%Y').date()).apply()
            case 'birthplace':
                await user.update(birth_place=message.text).apply()
            case 'birthtime':
                await user.update(birth_time=datetime.strptime(message.text, '%H:%M').time()).apply()
        mes = await bot.send_message(message.from_user.id,
                                     text='–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã üòÑ')
        await save_message_id(message, mes.message_id)
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ')
        await state.finish()
        await send(message)


async def change_daytime(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    if callback_query.data == "day_morning":
        day_info = 'morning'
    else:
        day_info = 'tomorrow'
    user = User(user_id=callback_query.from_user.id)
    await user.update(receive_day_period=day_info).apply()
    await bot.send_message(callback_query.from_user.id,
                           text='–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã üòÑ')
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∏–∑–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞')
    await send(callback_query)
    await callback_query.answer()


def register_handlers_client(disp: Dispatcher):
    disp.register_message_handler(start_command, commands=['start', 'help'], state='*')
    disp.register_message_handler(name_info, state=FSMClientRegistration.client_name)
    disp.register_callback_query_handler(gender_info, Text(startswith='gender'),
                                         state=FSMClientRegistration.client_gender)
    disp.register_message_handler(check_birthdate, state=FSMClientRegistration.client_birth_date)
    disp.register_message_handler(birthplace_info, state=FSMClientRegistration.client_birth_place)
    disp.register_callback_query_handler(birth_time, Text(startswith='know'),
                                         state=FSMClientRegistration.client_birth_time)
    disp.register_message_handler(set_birth_time, state=FSMClientRegistration.client_birth_time_set)
    disp.register_callback_query_handler(prepare_datas, Text(startswith='date'),
                                         state=FSMClientRegistration.client_send_date)
    disp.register_callback_query_handler(agree, Text(startswith='client'), state=FSMClientRegistration.client_agree)
    disp.register_callback_query_handler(change_info, Text(startswith='change'),
                                         state=FSMClientRegistration.client_change_info)
    disp.register_message_handler(what_to_change, state=FSMClientRegistration.client_what_to_change)
    disp.register_callback_query_handler(change_daytime, Text(startswith='day'),
                                         state=FSMClientRegistration.client_daytime_change)
    disp.register_message_handler(send, commands=['send'], state='*')
    disp.register_message_handler(change, commands=['change'], state='*')
    disp.register_message_handler(get_my_info, commands=['get_info'], state='*')
